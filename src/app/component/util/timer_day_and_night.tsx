import React, { useEffect, useState } from 'react';

const DayNightTimer = () => {
  const [timeState, setTimeState] = useState('');
  const [remainingTime, setRemainingTime] = useState(0);

  useEffect(() => {
    const fetchServerTime = async () => {
      try {
        const response = await fetch('/api/time', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
             target: 'time'
          }), 
        }); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å API –≤ Next.js
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞');
        }
        const { unixTime } = await response.json(); // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
        handleTime(unixTime);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏:', error);
      }
    };

    const handleTime = (serverTime: number) => {
      const currentTime: any = new Date(serverTime * 1000); // –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞–º
      const isEven = currentTime.getHours() % 2 === 0; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ç–Ω–æ—Å—Ç—å —á–∞—Å–∞
      setTimeState(isEven ? 'üåï' : 'üåô');

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const nextChange: any = new Date(currentTime);
      nextChange.setHours(nextChange.getHours() + 1, 0, 0, 0); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–Ω—ã–π —á–∞—Å
      const timeDiff = nextChange - currentTime; // –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑–Ω–∏—Ü–∞ (–º—Å)
      setRemainingTime(Math.floor(timeDiff / 1000)); // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã
    };

    fetchServerTime();

    // –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const timer = setInterval(() => {
      setRemainingTime(prevRemainingTime => {
        if (prevRemainingTime <= 0) {
          fetchServerTime(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
          return 0;
        }
        return prevRemainingTime - 1;
      });
    }, 1000);

    return () => clearInterval(timer); // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  }, []);

  const formatRemainingTime = () => {
    const minutes = Math.floor(remainingTime / 60);
    const seconds = remainingTime % 60;
    return `${minutes} –º ${seconds} —Å`;
  };

  return (
    <div className="flex items-center p-4 pr-4 bg-gray-800 text-white rounded shadow-md">
      <h2 className="text-xl font-bold">{timeState}</h2>
      <p>{formatRemainingTime()}</p>
    </div>
  );
};

export default DayNightTimer;
